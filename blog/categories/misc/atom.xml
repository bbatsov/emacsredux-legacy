<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | Emacs Redux]]></title>
  <link href="http://emacsredux.com/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2016-01-30T11:45:16+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[crux]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/crux/"/>
    <updated>2016-01-30T11:37:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/crux</id>
    <content type="html"><![CDATA[<p>I'd often blog about some useful utility functions here. Pretty much
all of them get included in
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a>, but I've decided I can do one better and extract those of
them which are most useful/universal into a separate package.</p>

<p>This package is <a href="https://github.com/bbatsov/crux">crux</a> - a
<strong>C</strong>ollection of <strong>R</strong>idiculously <strong>U</strong>seful e<strong>X</strong>tensions for
Emacs.</p>

<p>You can install it from MELPA and MELPA Stable. Once this is done you
just have to pick keybindings for the commands shipped with
<code>crux</code>. I've suggested some keybindings
<a href="https://github.com/bbatsov/crux#keybindings">here</a>. And here's a
small configuration snippet showing how to actually bind keys to some
of <code>crux</code>'s commands:</p>

<p><code>cl
(global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
(global-set-key (kbd "C-c o") #'crux-open-with)
(global-set-key [(shift return)] #'crux-smart-open-line)
(global-set-key (kbd "s-r") #'crux-recentf-ido-find-file)
(global-set-key (kbd "C-&lt;backspace&gt;" #'crux-kill-line-backwards))
(global-set-key [remap kill-whole-line] #'crux-kill-whole-line)
</code></p>

<p><code>crux</code> also ships with some handy advises that can enhance the operation of existing commands.</p>

<p>For instance - you can use <code>crux-with-region-or-buffer</code> to make a
command acting normally on a region to operate on the entire buffer in
the absense of a region. Here are a few examples you can stuff in your
config:</p>

<p><code>cl
(crux-with-region-or-buffer indent-region)
(crux-with-region-or-buffer untabify)
</code></p>

<p>So, this is <code>crux</code> for you - simple and neat! I'd love it if you
contributed more useful commands to it, so we can make it even more
versatile!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[super-save]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/super-save/"/>
    <updated>2016-01-30T11:26:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/super-save</id>
    <content type="html"><![CDATA[<p>A while back I wrote
<a href="http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/">an article on saving buffers when they lose focus</a>.</p>

<p>Recently I've packaged (an improved version of) this functionality
into a tiny global minor mode called
<a href="https://github.com/bbatsov/super-save">super-save</a>.</p>

<p>The package is available on MELPA and MELPA Stable and enabling it is trivial:</p>

<p><code>cl
(super-save-mode +1)
</code></p>

<p>If you're like me and don't care about the backups created by the
built-in <code>auto-save-mode</code>, you can disable it aftewards:</p>

<p><code>cl
(setq auto-save-default nil)
</code></p>

<p>I wouldn't really recommend doing this until I've added a bit of
functionality to save the current buffer when you're not typing, but
the option obviously exists. I've been using Emacs for over 10 years
now and I've never needed the auto-created backups - I'm either very
lucky or this is less useful than it's supposed to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Emacs (the first Emacs book in over a decade) is out]]></title>
    <link href="http://emacsredux.com/blog/2015/05/23/mastering-emacs-the-first-emacs-book-in-over-a-decade-is-out/"/>
    <updated>2015-05-23T15:19:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/23/mastering-emacs-the-first-emacs-book-in-over-a-decade-is-out</id>
    <content type="html"><![CDATA[<p><a href="https://www.masteringemacs.org/about">Mickey Petersen</a> just released
<a href="https://www.masteringemacs.org/book">Mastering Emacs</a>, the first new
book about our beloved editor, since
<a href="http://shop.oreilly.com/product/9780596006488.do">Learning GNU Emacs</a>(released
way back in 2004).</p>

<p><img src="/images/articles/mastering_emacs_cover.png"></p>

<p>I haven't had the time to read the book yet, but being familiar with
Mickey's work I have no doubt it's outstanding.  That's all from me
for now - go buy the book and start mastering Emacs.</p>

<p><strong>P.S.</strong></p>

<p>I hope we won't have to wait another decade for the next great Emacs book.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pragmatic Emacs]]></title>
    <link href="http://emacsredux.com/blog/2015/05/16/pragmatic-emacs/"/>
    <updated>2015-05-16T14:29:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/16/pragmatic-emacs</id>
    <content type="html"><![CDATA[<p>I recently noticed a new blog targeting beginner and intermediate
Emacs users - <a href="http://pragmaticemacs.com/">Pragmatic Emacs</a> by
<a href="http://www.bristol.ac.uk/physics/people/ben-j-maughan/overview.html">Ben Maughan</a>.</p>

<p>If you're relatively new to Emacs you should definitely check it
out. Knowing how vast the Emacs ecosystem is, I'm pretty sure that
more experienced Emacs users will also learn a thing or two there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lossage]]></title>
    <link href="http://emacsredux.com/blog/2014/12/23/lossage/"/>
    <updated>2014-12-23T17:35:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/12/23/lossage</id>
    <content type="html"><![CDATA[<p>Are you sure you're using Emacs in an efficient way? Perhaps you're
overusing commands like <code>C-f</code> and <code>C-b</code> to navigate around when you
can be using more efficient alternatives like <code>M-f</code> and <code>M-b</code> (or a
third-party package like
<a href="http://emacsrocks.com/e10.html">ace-jump-mode</a>).  Gaining such
insight is somewhat hard, as we generally don't pay attention to our
sub-optimal usage patterns. If we could only see what were the last
few hundred keystrokes we entered in our current Emacs
session... Turns out we can do this with the aptly-named command
<code>view-lossage</code> (<code>C-h l</code>) (<code>lossage</code> means <code>malfunction</code>). It displays
the last 300 keystrokes and its output looks like this:</p>

<p><code>
n e r a l l y SPC d o n ' t SPC n o t i c e SPC o u
r SPC s u b o p t i m a l SPC s u a g &lt;backspace&gt; &lt;backspace&gt;
&lt;backspace&gt; &lt;backspace&gt; u s a g e SPC p a t e &lt;backspace&gt;
t e r n s . SPC I f SPC w e SPC c o u l d SPC o n l
y &lt;return&gt; s e e SPC w h a t SPC w e r e SPC t h e
SPC l a s t SPC f &lt;backspace&gt; h e w SPC &lt;backspace&gt;
&lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; f e w SPC h u n
d r e d SPC k e y s t r o k e s SPC w e SPC i &lt;backspace&gt;
e n t e r e d SPC i n SPC o u r SPC c u r r e n t SPC
E m a c s SPC s e s s i o n . . . SPC T u r n s SPC
o u t SPC &lt;backspace&gt; SPC w e SPC c a n SPC d o SPC
t h i s &lt;company-dummy-event&gt; . &lt;backspace&gt; SPC w i
t h SPC t h e SPC m a c &lt;backspace&gt; g i c a l &lt;backspace&gt;
&lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt;
&lt;backspace&gt; &lt;backspace&gt; SPC c o m m a n d &lt;return&gt;
` v i e w - l o s s a g e ` SPC ( b o u n &lt;backspace&gt;
&lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; ` C - h SPC l `
) . C-p C-p M-q C-n C-n C-n C-e C-x b l o s s &lt;return&gt;
C-x b l o s C-g C-h l
</code></p>

<p>Inspecting it can be super enlightening! I do this all the time.</p>
]]></content>
  </entry>
  
</feed>
