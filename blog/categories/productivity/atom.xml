<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Emacs Redux]]></title>
  <link href="http://emacsredux.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2018-09-29T20:36:04+03:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Crazy Productivity Boost: Remapping Return to Control (2017 Edition)]]></title>
    <link href="http://emacsredux.com/blog/2017/12/31/a-crazy-productivity-boost-remapping-return-to-control-2017-edition/"/>
    <updated>2017-12-31T11:22:00+02:00</updated>
    <id>http://emacsredux.com/blog/2017/12/31/a-crazy-productivity-boost-remapping-return-to-control-2017-edition</id>
    <content type="html"><![CDATA[<p>Back in 2013 I wrote about my favourite productivity boost in Emacs,
namely <a href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/">remapping Return to
Control</a>,
which in combination with the classic remapping of <code>CapsLock</code> to
<code>Control</code> makes it really easy to get a grip on Emacs's obsession with
the Control key.</p>

<p>In the original article I suggested to OS X (now macOS) users the tool
<code>KeyRemap4MacBook</code>, which was eventually renamed to
<a href="https://pqrs.org/osx/karabiner/">Karabiner</a>. Unfortunately this tool
stopped working in macOS Sierra, due to some internal kernel
architecture changes.</p>

<p>That was pretty painful for me as it meant that on my old MacBook
I couldn't upgrade to the newest macOS editions and on my new
MacBook I couldn't type properly in Emacs (as it came with Sierra pre-installed)...
Bummer!</p>

<p>Fortunately 2 years later this is finally solved - the Karabiner team
rewrote Karabiner from scratch for newer macOS releases and recently
added my dream feature to the new <code>Karabiner Elements</code>. Unlike in the
past though, this remapping is not actually bundled with Karabiner by
default, so you have to download and enable it manually from
<a href="https://pqrs.org/osx/karabiner/complex_modifications/#caps_and_return_to_ctrl">here</a>.</p>

<p>That's actually even better than what I had originally suggested, as
here it's also suggested to use <code>CapsLock</code> with a dual purpose as
well - <code>Control</code> when held down and <code>Escape</code> otherwise.  I have no
idea how this never came to my mind, but it's truly epic! A crazy
productivity boost just got even crazier!</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A crazy productivity boost: Remap Return to Control]]></title>
    <link href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/"/>
    <updated>2013-11-12T17:09:00+02:00</updated>
    <id>http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control</id>
    <content type="html"><![CDATA[<p>People have always complained about the awkward positioning of
the two <code>Control</code> keys on modern keyboards. That's a fact! Effective Emacs
usage is heavily dependent on the <code>Control</code> keys (yep, both of
them). That's also a fact!</p>

<p>A great many Emacs users remap the infrequently used <code>CapsLock</code> key to
<code>Control</code> to alleviate partially the problem with the accessibility of
the control keys. That, while useful, is not sufficient for the
optimal typing experience, since that way you're breaking the key
symmetry on both sides of your keyboard. Also - your right pinky has
to go much further than your left one, while you're typing. Many
people seem to be using only the left <code>Control</code> and I guess they're
not particularly bothered by this, but touch typists like me are
generally quite bothered by such things.</p>

<p>A much better idea would be to leverage a little knows capability of
keyboard input systems and map the <code>Return</code> key to <code>Control</code> only
when it's held down (it will behave like a normal <code>Return</code> key in all
other situations). This sounds a bit crazy, but please bear with me for a while.</p>

<p>This radical approach has several advantages.  First and foremost -
it's much easier to hit <code>Return</code> with your right pinky than it is to
hit the regular right <code>Control</code> (especially if you're using a US
layout keyboard - these have long single row <code>Return</code> keys, compared
to the short 2 row Returns found on European keyboards). Second, if
you've already remapped <code>CapsLock</code> to <code>Control</code> (like you should have
done) you're getting a pretty symmetrical mapping on the opposite side
of your keyboard. Last, but not least - it's a great option for people
using compact keyboards with no left <code>Control</code> key.</p>

<p>Obviously you'll need some keyboard remapping software to make this
trick work. OSX users can use
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> to do
that.  In its settings look up the <code>Change Return</code> section and under
it <code>Return to Control_R (+ When you type Return only, send
Return)</code>. As far as I know this remapping can be done on GNU/Linux systems with <a href="https://github.com/alols/xcape">xcape</a>
(though I haven't checked that myself), but I have no idea if it's a viable option for Windows users.</p>

<p>All in all - remapping <code>Return</code> to <code>Control</code> should be a big
productivity win for some (the touch typists) of you and should make
your right pinky's life easier.</p>
]]></content>
  </entry>
  
</feed>
