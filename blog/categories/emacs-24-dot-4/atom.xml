<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs 24.4 | Emacs Redux]]></title>
  <link href="http://emacsredux.com/blog/categories/emacs-24-dot-4/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2016-03-02T20:11:46+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: hash-table-keys &amp; hash-table-values]]></title>
    <link href="http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-hash-table-keys-and-hash-table-values/"/>
    <updated>2014-02-02T09:59:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-hash-table-keys-and-hash-table-values</id>
    <content type="html"><![CDATA[<p>While Emacs has a pretty good hash-table API, two functions were
rather mysteriously absent from it - <code>hash-table-keys</code> and
<code>hash-table-values</code> (which would return a list of all keys/values in a
hash-table).</p>

<p>Many people who needed them simply defined them in their code
directly (usually in terms of <code>maphash</code>), but that's no longer
necessary in Emacs 24.4, as they are now part of the new built-in
library <code>subr-x</code>.</p>

<p>``` cl
;; all functions in the library are defined as inline, so you don't
;; need to require the library at runtime
(eval-when-compile (require 'subr-x))</p>

<p>(setq h (make-hash-table))</p>

<p>(puthash "Batman" "Bruce Wayne" h)
(puthash "Spiderman" "Peter Parker" h)
(puthash "Superman" "Clark Kent" h)</p>

<p>(hash-table-keys h)
; => ("Batman" "Spiderman" "Superman")</p>

<p>(hash-table-values h)
; => ("Bruce Wayne" "Peter Parker" "Clark Kent")
```</p>

<p>Nice and simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: New string manipulation functions]]></title>
    <link href="http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-new-string-manipulation-functions/"/>
    <updated>2014-02-02T09:29:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/02/02/a-peek-at-emacs-24-dot-4-new-string-manipulation-functions</id>
    <content type="html"><![CDATA[<p>Emacs has often been criticized for failing to provide a more
extensive string manipulation API (compared to that of programming
languages like Ruby and Perl, for instance).  As many programs
(extensions) running on top of it are doing quite a lot of string
manipulation, having a good string API is important. To compensate the
lack of certain primitives in Emacs itself a lot of package authors
are using these days packages like
<a href="https://github.com/magnars/s.el">s.el</a> or simply adding the string
functions they need directly to their packages (to reduce the number
of third-party deps).</p>

<p>In Emacs 24.4 finally the situation is improving. Finally, we're getting
<code>string-suffix-p</code>, which was mysteriously missing even though <code>string-prefix-p</code>
has been part of Emacs for years:</p>

<p><code>cl
(string-suffix-p "test" "my_test")
; =&gt; t
(string-suffix-p "tester" "my_test")
; =&gt; nil
</code></p>

<p>More importantly, Emacs 24.4 ships with a new built-in library called <code>subr-x</code>, which features
a bunch of other string manipulation functions:</p>

<ul>
<li><code>string-blank-p</code></li>
<li><code>string-empty-p</code></li>
<li><code>string-join</code></li>
<li><code>string-reverse</code></li>
<li><code>string-trim-left</code></li>
<li><code>string-trim-right</code></li>
<li><code>string-trim</code></li>
<li><code>string-remove-prefix</code></li>
<li><code>string-remove-suffix</code></li>
</ul>


<p>Here's a brief demo of them in action:</p>

<p>``` cl
;; all functions in the library are defined as inline, so you don't
;; need to require the library at runtime
(eval-when-compile (require 'subr-x))</p>

<p>(string-empty-p "")
; => t
(string-empty-p "  ")
; => nil
(string-blank-p "  ")
; => 0 (#o0, #x0, ?\C-@)
(string-reverse "Batman")
; => "namtaB"
(string-join '("one" "two" "three"))
; => "onetwothree"
(string-join '("one" "two" "three") ",")
; => "one,two,three"
(string-trim "   Peter Parker ")
; => "Peter Parker"
(string-remove-prefix "Mr. " "Mr. Smith")
; => "Smith"
(string-remove-suffix "Smith" "Mr. Smith")
; => "Mr. "
```</p>

<p>Sure, <code>subr-x</code> is not as extensive as <code>s.el</code> (and will never be), but
I think that it's a big step in the right direction. It's likely that
<code>subr-x</code> will be extended in subsequent Emacs versions and some of the
functions from it will be promoted to <code>built-in</code>.</p>

<p>That's all I have for now. Until next time!</p>
]]></content>
  </entry>
  
</feed>
