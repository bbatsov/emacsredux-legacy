<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Emacs Redux]]></title>
  <link href="http://emacsredux.com/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2017-12-31T11:17:48+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Into to CIDER]]></title>
    <link href="http://emacsredux.com/blog/2017/12/31/into-to-cider/"/>
    <updated>2017-12-31T10:57:00+02:00</updated>
    <id>http://emacsredux.com/blog/2017/12/31/into-to-cider</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/clojure-emacs/cider">CIDER</a> is a popular Clojure
programming environment for Emacs.</p>

<p>In a nutshell - CIDER extends Emacs with support for interactive
programming in Clojure. The features are centered around <code>cider-mode</code>,
an Emacs minor-mode that complements <code>clojure-mode</code>. While <code>clojure-mode</code>
supports editing Clojure source files, <code>cider-mode</code> adds support for
interacting with a running Clojure process for compilation, debugging,
definition and documentation lookup, running tests and so on.</p>

<p>You can safely think of CIDER as SLIME (a legendary Common Lisp programming
environment) for Clojure - after all SLIME was the principle
inspiration for CIDER to begin with. If you&#8217;re interested in some
historical background you can check out my talk on the subject <a href="https://www.youtube.com/watch?v=4X-1fJm25Ww&amp;list=PLZdCLR02grLoc322bYirANEso3mmzvCiI&amp;index=6">The
Evolution of the Emacs tooling for
Clojure</a>.</p>

<p>Many people who are new to Lisps (and Emacs) really struggle with the concept of
&#8220;interactive programming&#8221; and are often asking what&#8217;s the easiest (and
fastest) way to &#8220;grok&#8221; (understand) it.</p>

<p>While CIDER has an extensive <a href="https://cider.readthedocs.io/">manual</a> and a section
on <a href="https://cider.readthedocs.io/en/latest/interactive_programming/">interactive programming</a> there,
it seems for most people that&#8217;s not enough to get a clear understanding
of interactive programming fundamentals and appreciate its advantages.</p>

<p>I always felt what CIDER needed were more video tutorials on the
subject, but for one reason or another I never found the time to
produce any. In the past this <a href="https://www.youtube.com/watch?v=_B_4vhsmRRI">amazing intro to
SLIME</a> really changed my
perception of SLIME and got me from 0 to 80 in like one hour. I wanted
to do the same for CIDER users! And I accidentally did this in a way
last year - at a FP conference I was attending to present CIDER, one
of the speakers dropped out, and I was invited to fill in for them
with a hands-on session on CIDER. It was officially named <a href="https://www.youtube.com/watch?v=aYA4AAjLfT0">Deep Dive
into CIDER</a>, but probably
&#8220;Intro to CIDER&#8221; would have been a more appropriate name, and it&#8217;s
likely the best video introduction to CIDER around today. It&#8217;s
certainly not my finest piece of work, and I definitely have to
revisit the idea for proper high-quality tutorials in the future, but
it&#8217;s better than nothing. I hope at least some of you would find it useful!</p>

<p>You might also find some of the <a href="https://cider.readthedocs.io/en/latest/additional_resources/">additional CIDER
resources</a>
mentioned in the manual helpful.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pimp My Minibuffer Evaluation]]></title>
    <link href="http://emacsredux.com/blog/2016/03/02/pimp-my-minibuffer/"/>
    <updated>2016-03-02T18:57:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/03/02/pimp-my-minibuffer</id>
    <content type="html"><![CDATA[<p>In Emacs you can evaluate Emacs Lisp pretty much anywhere - even
<a href="http://emacsredux.com/blog/2013/04/18/evaluate-emacs-lisp-in-the-minibuffer/">in the minibuffer</a>. Writing
Emacs Lisp in the minibuffer, however, is not exactly fantastic
experience out-of-the-box - there&#8217;s <code>TAB</code> completion, but what about
<code>eldoc</code> and <code>paredit</code> for instance?</p>

<p>If only there was a way to enable them&#8230; I suggested one trick in my
original post on <code>eval-expression</code>, but Emacs 24.4 made things even
easier by adding <code>eval-expression-minibuffer-setup-hook</code>. To enable
<code>eldoc</code> for minibuffer evaluations use this snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;eval-expression-minibuffer-setup-hook</span> <span class="nf">#&#39;</span><span class="nv">eldoc-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For <code>paredit</code> you can use this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;eval-expression-minibuffer-setup-hook</span> <span class="nf">#&#39;</span><span class="nv">paredit-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you can do the same for any other minor mode you might need.</p>

<p>The best thing about this setup is that it will work with tools like
<a href="https://github.com/clojure-emacs/cider">CIDER</a> and
<a href="https://github.com/slime/slime">SLIME</a> as well (they have similar
commands which allow you to evaluate Clojure &amp; Common Lisp code and
those command trigger <code>eval-expression-minibuffer-setup-hook</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Look up the keybindings for some command]]></title>
    <link href="http://emacsredux.com/blog/2016/02/14/look-up-the-keybindings-for-some-command/"/>
    <updated>2016-02-14T18:10:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/02/14/look-up-the-keybindings-for-some-command</id>
    <content type="html"><![CDATA[<p>If you know the name of some command, but you&#8217;ve forgotten its
keybinding(s) there are 3 common options to look the keybinding(s) up.</p>

<ul>
<li><code>C-h f command-name</code></li>
</ul>


<p>This will display some information about the command in question in a help buffer.
Important bits of this information include where is the command defined, what are its
keybindingings if any, and its documentation.</p>

<ul>
<li><code>C-h w command-name</code></li>
</ul>


<p>This will display the keybindings of the command in the minibuffer. If you&#8217;re interested only
in the keybindings you should prefer this option over <code>C-h f</code>.</p>

<ul>
<li><code>M-x command-name</code></li>
</ul>


<p>After you invoke some command using <code>M-x</code> you&#8217;ll see a suggestion to use
its keybinding instead in the minibuffer.</p>

<p>That&#8217;s all for now, folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable annoying audio notifications]]></title>
    <link href="http://emacsredux.com/blog/2016/02/14/disable-annoying-audio-notifications/"/>
    <updated>2016-02-14T12:09:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/02/14/disable-annoying-audio-notifications</id>
    <content type="html"><![CDATA[<p>By default Emacs has some pretty annoying audio notifications for
certain events (e.g. trying to move past the end of a buffer). You&#8217;ve
got two options to get rid of them. Option 1 is to replace them with visual
notifications (the Emacs frame will flash):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">visible-bell</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&#8217;t work well on OS X and is just as annoying (if not even
more), so I&#8217;d suggest going with option 2 instead - disable those
notifications completely:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">ring-bell-function</span> <span class="ss">&#39;ignore</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At last - some peace and quiet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto-indent your code with aggressive-indent-mode]]></title>
    <link href="http://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/"/>
    <updated>2016-02-07T11:28:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode</id>
    <content type="html"><![CDATA[<p>One of the things I hate the most while programming, is having to
manually adjust the indentation of some code, after I&#8217;ve moved or
renamed something in it. While it&#8217;s pretty easy to do such re-indent
operations using commands like <code>crux-indent-defun</code> or
advices like <code>crux-with-region-or-buffer</code> (you remember,
<a href="https://github.com/bbatsov/crux">crux</a>, right?), there&#8217;s an even more
efficient way to tackle the issue at hand. Enter
<a href="https://github.com/Malabarba/aggressive-indent-mode">aggressive-indent-mode</a>.</p>

<p><code>aggressive-indent-mode</code>&#8217;s name is a bit of a misnomer - it should
probably have been named <code>auto-indent-mode</code>, as this is what it
does. When you edit your code it will adjust the indentation
automatically. It&#8217;s easier to show this than to explain it.</p>

<p>Here&#8217;s one example showing <code>agressive-indent-mode</code> enabled in <code>emacs-lisp-mode</code>:</p>

<p><img src="https://raw.githubusercontent.com/Malabarba/aggressive-indent-mode/master/lisp-example.gif"></p>

<p>And another example using <code>cc-mode</code>:</p>

<p><img src="https://raw.githubusercontent.com/Malabarba/aggressive-indent-mode/master/c-example.gif"></p>

<p>Provided you&#8217;ve installed the mode, enabling it for particular major modes is a piece of cake:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;emacs-lisp-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">aggressive-indent-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;clojure-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">aggressive-indent-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;ruby-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">aggressive-indent-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to enable it in all major modes you can do this as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-aggressive-indent-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this is not going to work well with modes like <code>python-mode</code>
and <code>haml-mode</code> where the proper indentation can&#8217;t be reliably
determined.  When <code>global-aggressive-indent-mode</code> is enabled it will
not affect major modes listed in <code>aggressive-indent-excluded-modes</code>.</p>

<p>For more info - head over to the
<a href="https://github.com/Malabarba/aggressive-indent-mode/blob/master/README.md">project&#8217;s readme</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Display the Keybinding for a Command with substitute-command-keys]]></title>
    <link href="http://emacsredux.com/blog/2016/02/01/display-the-keybinding-for-a-command-with-substitute-command-keys/"/>
    <updated>2016-02-01T08:23:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/02/01/display-the-keybinding-for-a-command-with-substitute-command-keys</id>
    <content type="html"><![CDATA[<p>If you ever need to show the keybinding for a particular command to
the users of your package (e.g. you&#8217;re adding some tips
functionality), you should avoid resisting the urge to write something like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Press &lt;C-c p p&gt; to switch between projects.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is this a bad idea? Because you might change the keybinding of the
command in question (e.g. <code>projectile-switch-project</code>, but you might
forget to update messages like this. Is there a better way?
<code>substitute-command-keys</code> to the rescue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">message</span> <span class="p">(</span><span class="nv">substitute-command-keys</span> <span class="s">&quot;Press &lt;\\[projectile-switch-project]&gt; to switch between projects&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will produce exactly the same message as before and you&#8217;re
guaranteed the keybinding will always be in sync with the command.</p>

<p>Neat!</p>

<p>P.S. If you want to check interactively the keybinding of some command use <code>C-h f</code> (<code>describe-function</code>). Here&#8217;s
an example - <code>C-h f RET projectile-switch-project RET</code> will produce this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="nv">projectile-switch-project</span> <span class="nv">is</span> <span class="nv">an</span> <span class="nv">interactive</span> <span class="nv">compiled</span> <span class="nv">Lisp</span> <span class="nv">function.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">It</span> <span class="nv">is</span> <span class="nv">bound</span> <span class="nv">to</span> <span class="nv">C-c</span> <span class="nv">p</span> <span class="nv">p,</span> <span class="nv">s-p</span> <span class="nv">p,</span> <span class="nv">&lt;menu-bar&gt;</span> <span class="nv">&lt;tools&gt;</span> <span class="nv">&lt;Projectile&gt;</span> <span class="nv">&lt;Switch</span>
</span><span class='line'><span class="nv">to</span> <span class="nv">project&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">projectile-switch-project</span> <span class="k">&amp;optional</span> <span class="nv">ARG1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also check which command is bound to some key with <code>C-h k</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Tab to Indent or Complete]]></title>
    <link href="http://emacsredux.com/blog/2016/01/31/use-tab-to-indent-or-complete/"/>
    <updated>2016-01-31T09:02:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/31/use-tab-to-indent-or-complete</id>
    <content type="html"><![CDATA[<p>By default in Emacs the <code>Tab</code> key does only indentation. If some major
mode provides completion of some form, you normally have to trigger it
with <code>M-Tab</code>. In most window managers, however, this keybinding is used to
switch between open windows, which makes it a bit hard to use out of the box.</p>

<p>There&#8217;s a simple trick to augment the default <code>Tab</code> behavior. Just put
this in your Emacs config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">tab-always-indent</span> <span class="err">‘</span><span class="nv">complete</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when you press <code>Tab</code> one time it will indent and if you press it
again you&#8217;ll get completion candidates. If the indentation at point is
already correct you&#8217;ll get the completion candidates right away. As an
added bonus - you don&#8217;t really need <code>M-Tab</code> anymore.</p>

<p>Simple and neat! One really has to wonder why this isn&#8217;t the default
behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[imenu-anywhere]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/imenu-anywhere/"/>
    <updated>2016-01-30T12:45:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/imenu-anywhere</id>
    <content type="html"><![CDATA[<p>For the longest time <a href="https://github.com/bbatsov/prelude">Prelude</a>
included the function <code>prelude-goto-symbol</code> (bound to <code>C-c i</code>).
It basically allowed you to jump to any definition in the current source file
using <code>imenu</code> behind the curtains.</p>

<p>Recently I&#8217;ve found an even better option - the package
<a href="https://github.com/vspinu/imenu-anywhere">imenu-anywhere</a>. It works in a pretty similar
manner but gives you the ability to jump to any definition in any currently open buffer.
That&#8217;s quite handy and it greatly reduces the need to use something like <code>etags</code>.</p>

<p>As an added bonus - <code>imenu-anywhere</code> features helm integration.</p>

<p>This is a very handy package and I encourage you to give it a go!</p>

<p>P.S. Prelude users should simply upgrade to the latest version of
Prelude (it already uses it).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Personal Emacs Configuration]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/my-personal-emacs-configuration/"/>
    <updated>2016-01-30T12:31:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/my-personal-emacs-configuration</id>
    <content type="html"><![CDATA[<p>From time to time people ask me about my personal Emacs
configuration. Other just assume that I use
<a href="https://github.com/bbatsov/prelude">Prelude</a>. For a very long time my
personal configuration was pretty similar to Prelude - in a way it was
a staging ground for things to go into Prelude eventually (although
changes would travel both ways when Prelude users suggest some cool
things).</p>

<p>Recently I&#8217;ve decided that in the future I want to do a few things with Prelude:</p>

<ul>
<li>extract as much functionality from it as possible into reusable
packages (e.g. <a href="https://github.com/bbatsov/super-save">super-save</a>
and <a href="https://github.com/bbatsov/crux">crux</a>)</li>
<li>adopt there <a href="https://github.com/jwiegley/use-package">use-package</a></li>
<li>improve the support for Windows (because now I have Windows computer)</li>
</ul>


<p>As part of these efforts I reworked my personal config into something
pretty simple (it&#8217;s a single <code>init.el</code> file) and I&#8217;ve started
experimenting with ideas for the future. Stay tuned for the results!</p>

<p>The config is available
<a href="https://github.com/bbatsov/emacs.d">here</a>. Perhaps some of you will
find something useful there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remap Return to Control in GNU/Linux]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/remap-return-to-control-in-gnu-slash-linux/"/>
    <updated>2016-01-30T11:48:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/remap-return-to-control-in-gnu-slash-linux</id>
    <content type="html"><![CDATA[<p>A long time ago I wrote about
<a href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/">remapping Return to Control in OS X</a>.
This was the best productivity boost for my Emacs experience ever!</p>

<p>Recently I&#8217;ve bought a Windows ultrabook (wanted something as light as
MacBook Air, but more powerful and versatile) and I&#8217;m doing most of my
work there in a Xubuntu VM. The first thing I did while setting up Xubuntu
was to figure out how to do the aforementioned remapping.</p>

<p>In my original post some people suggested the tool
<a href="https://github.com/alols/xcape">xcape</a>, so I took a look at it.  The
tool can certainly use some documentation improvements (and pre-built
packages), but it gets the job done. After you&#8217;ve installed it you
just need to add the following to your login shell&#8217;s init file
(e.g. <code>.bash_profile</code>) and you&#8217;re in business:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xmodmap -e "remove Control = Control_R"
</span><span class='line'>xmodmap -e "keycode 0x69 = Return"
</span><span class='line'>xmodmap -e "keycode 0x24 = Control_R"
</span><span class='line'>xmodmap -e "add Control = Control_R"
</span><span class='line'>
</span><span class='line'>xcape -t 10000 -e "Control_R=Return"</span></code></pre></td></tr></table></div></figure>


<p>Obviously the first time around you should source <code>.bash_profile</code>
after updating it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ . .bash_profile</span></code></pre></td></tr></table></div></figure>


<p>This is definitely a lot more work than just clicking in the GUI of
the wonderful <a href="https://pqrs.org/osx/karabiner/">Karabiner</a>, but it yields
the desired results and that&#8217;s what&#8217;s important at the end of the day.</p>

<p>Now if only there was a way to achieve the same result in Windows&#8230;</p>

<p>P.S. <code>vim</code> users will love <code>xcape</code>. Its default behaviour is to
generate the <code>Escape</code> key when <code>Left Control</code> is pressed and released on
its own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crux]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/crux/"/>
    <updated>2016-01-30T11:37:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/crux</id>
    <content type="html"><![CDATA[<p>I&#8217;d often blog about some useful utility functions here. Pretty much
all of them get included in
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a>, but I&#8217;ve decided I can do one better and extract those of
them which are most useful/universal into a separate package.</p>

<p>This package is <a href="https://github.com/bbatsov/crux">crux</a> - a
<strong>C</strong>ollection of <strong>R</strong>idiculously <strong>U</strong>seful e<strong>X</strong>tensions for
Emacs.</p>

<p>You can install it from MELPA and MELPA Stable. Once this is done you
just have to pick keybindings for the commands shipped with
<code>crux</code>. I&#8217;ve suggested some keybindings
<a href="https://github.com/bbatsov/crux#keybindings">here</a>. And here&#8217;s a
small configuration snippet showing how to actually bind keys to some
of <code>crux</code>&#8217;s commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[remap</span> <span class="nv">move-beginning-of-line]</span> <span class="nf">#&#39;</span><span class="nv">crux-move-beginning-of-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c o&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">crux-open-with</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[</span><span class="p">(</span><span class="nv">shift</span> <span class="nb">return</span><span class="p">)</span><span class="nv">]</span> <span class="nf">#&#39;</span><span class="nv">crux-smart-open-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;s-r&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">crux-recentf-ido-find-file</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-&lt;backspace&gt;&quot;</span> <span class="nf">#&#39;</span><span class="nv">crux-kill-line-backwards</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[remap</span> <span class="nv">kill-whole-line]</span> <span class="nf">#&#39;</span><span class="nv">crux-kill-whole-line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>crux</code> also ships with some handy advises that can enhance the operation of existing commands.</p>

<p>For instance - you can use <code>crux-with-region-or-buffer</code> to make a
command acting normally on a region to operate on the entire buffer in
the absense of a region. Here are a few examples you can stuff in your
config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">crux-with-region-or-buffer</span> <span class="nv">indent-region</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">crux-with-region-or-buffer</span> <span class="nv">untabify</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this is <code>crux</code> for you - simple and neat! I&#8217;d love it if you
contributed more useful commands to it, so we can make it even more
versatile!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[super-save]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/super-save/"/>
    <updated>2016-01-30T11:26:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/super-save</id>
    <content type="html"><![CDATA[<p>A while back I wrote
<a href="http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/">an article on saving buffers when they lose focus</a>.</p>

<p>Recently I&#8217;ve packaged (an improved version of) this functionality
into a tiny global minor mode called
<a href="https://github.com/bbatsov/super-save">super-save</a>.</p>

<p>The package is available on MELPA and MELPA Stable and enabling it is trivial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">super-save-mode</span> <span class="mi">+1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to enable the additional feature of auto-saving buffers
when Emacs is idle, add the following as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">super-save-auto-save-when-idle</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re like me and don&#8217;t care about the backups created by the
built-in <code>auto-save-mode</code>, you can disable it aftewards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">auto-save-default</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve been using Emacs for over 10 years
now and I&#8217;ve never needed the auto-created backups - I&#8217;m either very
lucky or this is less useful than it&#8217;s supposed to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ace-jump-mode is Dead, Long Live Avy]]></title>
    <link href="http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/"/>
    <updated>2015-07-19T11:48:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy</id>
    <content type="html"><![CDATA[<p>People often ask how am I navigating efficiently Emacs windows and
buffers. I have the feeling they expect me to share with them some
secrets that would turbo-charge common commands like <code>C-s</code>, <code>M-f</code>,
<code>C-x o</code>, etc.  I don&#8217;t, however, use those commands that much. Ever
since I saw that vim&#8217;s
<a href="https://github.com/easymotion/vim-easymotion">EasyMotion</a> has been
ported to Emacs, I&#8217;ve been using that port - namely
<a href="https://github.com/winterTTr/ace-jump-mode">ace-jump-mode</a>.</p>

<p>Basically, it allows you to navigate to every visible portion of your
Emacs (buffers &amp; windows) with only a handful of keystrokes (usually
one two activate it and one or two to get where you want to go). You
can see it in action in this
<a href="http://emacsrocks.com/e10.html">excellent video</a>. <code>ace-jump</code> served
me well for years, but I&#8217;ve had a few gripes with it that were never
addressed (multi-char targets, CamelCase support, etc). I would have
implemented those myself, if the project was maintained at all, but
alas - that&#8217;s not the case. Seems I wasn&#8217;t the only one who was
frustrated with <code>ace-jump</code>, as the prolific
<a href="http://oremacs.com/">Oleh Krehel</a> reimplemented it pretty much from
scratch for the purposes of his excellent
<a href="https://github.com/abo-abo/ace-window">ace-window</a> library. Once I
got wind of this, I managed to persuade Oleh to start distributing his
rewrite as a standalone project, which he dubbed
<a href="https://github.com/abo-abo/avy">avy</a>.</p>

<p><code>Avy</code> features everything <code>ace-jump</code> does and more. Apart from the
many extra features, its codebase is way cleaner and readable and Oleh
is a fantastic and very responsive maintainer. So, as far as I&#8217;m
concerned <code>ace-jump</code> is now a dead project and pretty much everyone
who&#8217;s using it should try out <code>avy</code> instead. Their usage and interface
are pretty similar, so the learning curve is non-existing. By the way,
here&#8217;s <code>avy</code> in action:</p>

<p><img src="https://raw.githubusercontent.com/wiki/nloyola/avy/images/avy-goto-char.png"></p>

<p>And what about my usage of <code>avy</code>? Nothing fancy here - I just bind the
commands I consider most important to handy keystrokes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c j&quot;</span><span class="p">)</span> <span class="ss">&#39;avy-goto-word-or-subword-1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;s-.&quot;</span><span class="p">)</span> <span class="ss">&#39;avy-goto-word-or-subword-1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;s-w&quot;</span><span class="p">)</span> <span class="ss">&#39;ace-window</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>avy-goto-word-or-subword-1</code> is aware of CamelCase words and I do a
lot of programming in languages that use those extensively.</p>

<p><code>avy</code> has one more thing going for it - it&#8217;s part of the default Emacs
package repo <a href="https://elpa.gnu.org/packages/">GNU ELPA</a>, which means
that you can install it right away without having to setup any
third-party repositories (which you&#8217;ll probably need sooner or later).</p>

<p><code>avy</code> and <code>ace-window</code> are naturally part of
<a href="https://github.com/bbatsov/prelude">Prelude</a>.</p>

<p>P.S. Oleh, one of those days you should rename <code>ace-window</code> to <code>avy-window</code>. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDEE Reborn]]></title>
    <link href="http://emacsredux.com/blog/2015/07/19/jdee-reborn/"/>
    <updated>2015-07-19T11:37:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/07/19/jdee-reborn</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jdee-emacs/jdee">JDEE</a> (Java Development
Environment for Emacs) used to be best way to develop Java apps in
Emacs a while back. It offered a ton of
<a href="http://emacswiki.org/emacs/JavaDevelopmentEnvironment">cool features</a>,
like smart auto-completion and a debugger. Unfortunately at some point
the development slowed down significantly and the project went in a
catatonic state. There was pretty much no activity for years in the
official SourceForge repo and there was also no support for features
introduced in Java 5+.</p>

<p>Recently, however, the project migrated to
<a href="https://github.com/jdee-emacs/jdee">GitHub</a> and it&#8217;s now way easier
to get involved. Seems that some people have already started work on
updating JDEE to support modern JDKs and modern Emacs functionality.</p>

<p>That&#8217;s a really exciting project, as Java support has traditionally
been a weakness of Emacs and I&#8217;m writing this post with the hope that
more people will help make JDEE great again.</p>

<p>So what are you waiting for? If you&#8217;re into Java and friends (Scala,
Clojure, Groovy, etc), check out the new official repo and let&#8217;s get
this party started!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Emacs (the first Emacs book in over a decade) is out]]></title>
    <link href="http://emacsredux.com/blog/2015/05/23/mastering-emacs-the-first-emacs-book-in-over-a-decade-is-out/"/>
    <updated>2015-05-23T15:19:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/23/mastering-emacs-the-first-emacs-book-in-over-a-decade-is-out</id>
    <content type="html"><![CDATA[<p><a href="https://www.masteringemacs.org/about">Mickey Petersen</a> just released
<a href="https://www.masteringemacs.org/book">Mastering Emacs</a>, the first new
book about our beloved editor, since
<a href="http://shop.oreilly.com/product/9780596006488.do">Learning GNU Emacs</a>(released
way back in 2004).</p>

<p><img src="http://emacsredux.com/images/articles/mastering_emacs_cover.png"></p>

<p>I haven&#8217;t had the time to read the book yet, but being familiar with
Mickey&#8217;s work I have no doubt it&#8217;s outstanding.  That&#8217;s all from me
for now - go buy the book and start mastering Emacs.</p>

<p><strong>P.S.</strong></p>

<p>I hope we won&#8217;t have to wait another decade for the next great Emacs book.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Emacs Lisp]]></title>
    <link href="http://emacsredux.com/blog/2015/05/16/learning-emacs-lisp/"/>
    <updated>2015-05-16T14:37:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/16/learning-emacs-lisp</id>
    <content type="html"><![CDATA[<p>People who have been using Emacs for a while often develop the desire
to learn Emacs Lisp, so they can customize Emacs more extensively,
develop extra packages and create the ultimate editing experience,
uniquely tailored to their needs &amp; preferences.</p>

<p>There are a ton of Emacs Lisp resources our there, but most people
generally need only one - the official
<a href="https://www.gnu.org/software/emacs/manual/elisp.html">Emacs Lisp manual</a>. It&#8217;s
bundled with Emacs and you can start reading right away by pressing
<code>C-h i m Elisp RET</code>. If you&#8217;re relatively new to programming in
general you might also check out the
<a href="https://www.gnu.org/software/emacs/manual/eintr.html">Introduction to Emacs Lisp</a>
(<code>C-h i m Emacs Lisp Intro RET</code>), before diving into the manual.</p>

<p>There are also plenty of Emacs Lisp tutorials online, but I&#8217;d advise
against using them, as most of them have never been updated after
originally published and Emacs Lisp keeps evolving all the time
(albeit not as fast as I would have liked it to). That being said,
<a href="http://bzg.fr/learn-emacs-lisp-in-15-minutes.html">Learn Emacs Lisp in 15 minutes</a>
is a short and sweet intro to the language. You can find more online
educational resources on the
<a href="http://www.emacswiki.org/emacs/EmacsLisp">EmacsWiki</a>.</p>

<p>Trust me on this - any time invested in learning Emacs Lisp will be
time well spent!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pragmatic Emacs]]></title>
    <link href="http://emacsredux.com/blog/2015/05/16/pragmatic-emacs/"/>
    <updated>2015-05-16T14:29:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/16/pragmatic-emacs</id>
    <content type="html"><![CDATA[<p>I recently noticed a new blog targeting beginner and intermediate
Emacs users - <a href="http://pragmaticemacs.com/">Pragmatic Emacs</a> by
<a href="http://www.bristol.ac.uk/physics/people/ben-j-maughan/overview.html">Ben Maughan</a>.</p>

<p>If you&#8217;re relatively new to Emacs you should definitely check it
out. Knowing how vast the Emacs ecosystem is, I&#8217;m pretty sure that
more experienced Emacs users will also learn a thing or two there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building MELPA packages locally]]></title>
    <link href="http://emacsredux.com/blog/2015/05/10/building-melpa-packages-locally/"/>
    <updated>2015-05-10T11:00:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/10/building-melpa-packages-locally</id>
    <content type="html"><![CDATA[<p>Don&#8217;t want to wait for the MELPA packages to be automatically rebuilt?
Want to try out some package recipe before submitting it upstream? You can
totally do this!</p>

<p>Just clone the
<a href="https://github.com/milkypostman/melpa">MELPA github repo</a>, open a
recipe from it in Emacs and press <code>C-c C-c</code> (bound to the command
<code>package-build-current-recipe</code>). Once the package is built you&#8217;ll be
prompted to install it.</p>

<p>Pretty neat, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs on OS X]]></title>
    <link href="http://emacsredux.com/blog/2015/05/09/emacs-on-os-x/"/>
    <updated>2015-05-09T13:31:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/09/emacs-on-os-x</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>In this article I&#8217;ll share with you a few tips and tricks about
running Emacs under the Max OS X operating system. This article will
focus on the vanilla GNU Emacs, but if you want a more native OS X experience you
might have a look at the
<a href="https://github.com/railwaycat/homebrew-emacsmacport/releases">enhanced Emacs Mac port</a>.</p>

<h2>Installation</h2>

<p>While Emacs is available for installation from
<a href="http://wikemacs.org/wiki/Installing_Emacs_on_OS_X">various sources</a>
I recommend you to use the
<a href="http://emacsformacosx.com/">Emacs for Mac OS X binary distribution</a>.</p>

<p>I always run the latest development version and I use homebrew to install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install emacs --HEAD --with-cocoa
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind there&#8217;s an ancient Emacs 22 that ships with OS X.  You
might want to alter your <code>PATH</code>, so that the new Emacs is picked up in
a shell.</p>

<p>Alternatively you can just create an alias in your shell and when you
invoke <code>emacs</code> it will run the newly installed version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs -nw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you installed via Homebrew that path might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/usr/local/Cellar/emacs/24.5/Emacs.app/Contents/MacOS/Emacs -nw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make it permanent, if using bash, add that line to
<code>~/.bash_profile</code>. zsh users will want to update <code>~/.zshrc</code> instead.</p>

<p>In case you&#8217;re wondering - <code>nw</code> tells Emacs to start in &#8220;terminal&#8221;
mode (instead of in GUI mode).</p>

<h2>Keybindings</h2>

<p>I heartily recommend you to remap your <em>Caps Lock</em> key to <em>Control</em>. This
can be easily done via <em>Preferences -> Keyboard -> Modifier Keys</em>. If
you&#8217;re using a laptop keyboard or the bluetooth keyboard you
might want to remap your right <code>Option</code> key to <code>Control</code> as
well. No one can use effectively Emacs without a right Control
key. Remapping it is a bit more involved and requires the use of the
third-party utility
<a href="http://pqrs.org/macosx/karabiner/">Karabiner</a>.</p>

<p>If you&#8217;re adventurous you might even try <a href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/">a crazier idea</a>.</p>

<h2>Setting the PATH variable</h2>

<p>Long story short - if you&#8217;re running Emacs from Spotlight (or any
other launcher for that matter) your <code>PATH</code> and <code>exec-path</code> variables
won&#8217;t be same as the ones in your shell (and that&#8217;s every nasty since
you want be able to run some external programs from Emacs). The best
way to handle this would be installing the package
<a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a>
by Steve Purcell.</p>

<h2>Flyspell</h2>

<p>For flyspell to work correctly you&#8217;ll need to install aspell plus a few dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install aspell --lang<span class="o">=</span>en
</span></code></pre></td></tr></table></div></figure>


<h2>Proced</h2>

<p>The mighty
<a href="http://emacsredux.com/blog/2013/05/02/manage-processes-with-proced/">proced</a>
doesn&#8217;t work on OS X.  You can use
<a href="http://www.splode.com/~friedman/software/emacs-lisp/src/vkill.el">vkill</a>
as a replacement. It&#8217;s kind of basic, but it mostly works.</p>

<h2>Dired</h2>

<p>OS X ships with BSD&#8217;s <code>ls</code> command which doesn&#8217;t have all the features
of GNU <code>ls</code> (used internally by <code>dired</code>). Fortunately, this is easily solvable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install coreutils
</span></code></pre></td></tr></table></div></figure>


<p>To avoid conflicts the GNU utils are prefixed with <code>g</code>, so <code>ls</code> becomes <code>gls</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">insert-directory-program</span> <span class="p">(</span><span class="nv">executable-find</span> <span class="s">&quot;gls&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dash</h2>

<p><a href="https://kapeli.com/dash">Dash</a> is the ultimately API documentation
browser. I can&#8217;t live without it!</p>

<p>If you&#8217;re using it as well, you might want to install
<a href="https://github.com/stanaka/dash-at-point">dash-at-point</a>.</p>

<h2>More goodies</h2>

<p>If you want to spare yourself part of the headache of configuring
Emacs on OSX and get a lot of extra firepower you might want to install
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> - an enhanced
Emacs 24.x configuration (developed by yours truly) that should make
your experience with Emacs both more pleasant and more powerful.</p>

<p><strong>P.S.</strong> I&#8217;d like to hear your tips &amp; suggestions about making the
Emacs experience on OS X nicer and more powerful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clear Comint Buffers]]></title>
    <link href="http://emacsredux.com/blog/2015/01/18/clear-comint-buffers/"/>
    <updated>2015-01-18T21:57:00+02:00</updated>
    <id>http://emacsredux.com/blog/2015/01/18/clear-comint-buffers</id>
    <content type="html"><![CDATA[<p><code>comint</code> provides Emacs infrastructure for building command
interpreters. It&#8217;s backing a lot of popular shell/REPL modes - like <code>eshell</code>,
<code>inferior-lisp</code>, <code>inf-ruby</code>, <code>inf-clojure</code>, etc.</p>

<p><code>comint</code> provides a myriad of built-in commands, but somewhat surprisingly
it doesn&#8217;t feature a command to clear the contents of a <code>comint</code> buffer.
Let&#8217;s write one such command ourselves!</p>

<p>While there are several way to tackle it, I feel this is the simplest
(and the one that makes the best use of <code>comint</code>&#8217;s existing
functionality):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">comint-clear-buffer</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">comint-buffer-maximum-size</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">comint-truncate-buffer</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; let&#39;s bind the new command to a keycombo</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">comint-mode-map</span> <span class="s">&quot;\C-c\M-o&quot;</span> <span class="nf">#&#39;</span><span class="nv">comint-clear-buffer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Simple and elegant, right? One day it might even end up being part of <code>comint</code> itself.</p>
]]></content>
  </entry>
  
</feed>
