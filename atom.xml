<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Emacs Redux]]></title>
  <link href="http://emacsredux.com/atom.xml" rel="self"/>
  <link href="http://emacsredux.com/"/>
  <updated>2016-01-30T12:26:54+02:00</updated>
  <id>http://emacsredux.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remap Return to Control in GNU/Linux]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/remap-return-to-control-in-gnu-slash-linux/"/>
    <updated>2016-01-30T11:48:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/remap-return-to-control-in-gnu-slash-linux</id>
    <content type="html"><![CDATA[<p>A long time ago I wrote about
<a href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/">remapping Return to Control in OS X</a>.
This was the best productivity boost for my Emacs experience ever!</p>

<p>Recently I&#8217;ve bought a Windows ultrabook (wanted something as light as
MacBook Air, but more powerful and versatile) and I&#8217;m doing most of my
work there in a Xubuntu VM. The first thing I did while setting up Xubuntu
was to figure out how to do the aforementioned remapping.</p>

<p>In my original post some people suggested the tool
<a href="https://github.com/alols/xcape">xcape</a>, so I took a look at it.  The
tool can certainly use some documentation improvements (and pre-built
packages), but it gets the job done. After you&#8217;ve installed it you
just need to add the following to your login shell&#8217;s init file
(e.g. <code>.bash_profile</code>) and you&#8217;re in business:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xmodmap -e "remove Control = Control_R"
</span><span class='line'>xmodmap -e "keycode 0x69 = Return"
</span><span class='line'>xmodmap -e "keycode 0x24 = Control_R"
</span><span class='line'>xmodmap -e "add Control = Control_R"
</span><span class='line'>
</span><span class='line'>xcape -t 10000 -e "Control_R=Return"</span></code></pre></td></tr></table></div></figure>


<p>Obviously the first time around you should source <code>.bash_profile</code>
after updating it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ . .bash_profile</span></code></pre></td></tr></table></div></figure>


<p>This is definitely a lot more work than just clicking in the GUI of
the wonderful <a href="https://pqrs.org/osx/karabiner/">Karabiner</a>, but it yields
the desired results and that&#8217;s what&#8217;s important at the end of the day.</p>

<p>Now if only there was a way to achieve the same result in Windows&#8230;</p>

<p>P.S. <code>vim</code> users will love <code>xcape</code>. Its default behaviour is to
generate the <code>Escape</code> key when <code>Left Control</code> is pressed and released on
its own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crux]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/crux/"/>
    <updated>2016-01-30T11:37:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/crux</id>
    <content type="html"><![CDATA[<p>I&#8217;d often blog about some useful utility functions here. Pretty much
all of them get included in
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a>, but I&#8217;ve decided I can do one better and extract those of
them which are most useful/universal into a separate package.</p>

<p>This package is <a href="https://github.com/bbatsov/crux">crux</a> - a
<strong>C</strong>ollection of <strong>R</strong>idiculously <strong>U</strong>seful e<strong>X</strong>tensions for
Emacs.</p>

<p>You can install it from MELPA and MELPA Stable. Once this is done you
just have to pick keybindings for the commands shipped with
<code>crux</code>. I&#8217;ve suggested some keybindings
<a href="https://github.com/bbatsov/crux#keybindings">here</a>. And here&#8217;s a
small configuration snippet showing how to actually bind keys to some
of <code>crux</code>&#8217;s commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[remap</span> <span class="nv">move-beginning-of-line]</span> <span class="nf">#&#39;</span><span class="nv">crux-move-beginning-of-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c o&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">crux-open-with</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[</span><span class="p">(</span><span class="nv">shift</span> <span class="nb">return</span><span class="p">)</span><span class="nv">]</span> <span class="nf">#&#39;</span><span class="nv">crux-smart-open-line</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;s-r&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">crux-recentf-ido-find-file</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-&lt;backspace&gt;&quot;</span> <span class="nf">#&#39;</span><span class="nv">crux-kill-line-backwards</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="nv">[remap</span> <span class="nv">kill-whole-line]</span> <span class="nf">#&#39;</span><span class="nv">crux-kill-whole-line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>crux</code> also ships with some handy advises that can enhance the operation of existing commands.</p>

<p>For instance - you can use <code>crux-with-region-or-buffer</code> to make a
command acting normally on a region to operate on the entire buffer in
the absense of a region. Here are a few examples you can stuff in your
config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">crux-with-region-or-buffer</span> <span class="nv">indent-region</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">crux-with-region-or-buffer</span> <span class="nv">untabify</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this is <code>crux</code> for you - simple and neat! I&#8217;d love it if you
contributed more useful commands to it, so we can make it even more
versatile!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[super-save]]></title>
    <link href="http://emacsredux.com/blog/2016/01/30/super-save/"/>
    <updated>2016-01-30T11:26:00+02:00</updated>
    <id>http://emacsredux.com/blog/2016/01/30/super-save</id>
    <content type="html"><![CDATA[<p>A while back I wrote
<a href="http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/">an article on saving buffers when they lose focus</a>.</p>

<p>Recently I&#8217;ve packaged (an improved version of) this functionality
into a tiny global minor mode called
<a href="https://github.com/bbatsov/super-save">super-save</a>.</p>

<p>The package is available on MELPA and MELPA Stable and enabling it is trivial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">super-save-mode</span> <span class="mi">+1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re like me and don&#8217;t care about the backups created by the
built-in <code>auto-save-mode</code>, you can disable it aftewards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">auto-save-default</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wouldn&#8217;t really recommend doing this until I&#8217;ve added a bit of
functionality to save the current buffer when you&#8217;re not typing, but
the option obviously exists. I&#8217;ve been using Emacs for over 10 years
now and I&#8217;ve never needed the auto-created backups - I&#8217;m either very
lucky or this is less useful than it&#8217;s supposed to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ace-jump-mode is Dead, Long Live Avy]]></title>
    <link href="http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/"/>
    <updated>2015-07-19T11:48:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy</id>
    <content type="html"><![CDATA[<p>People often ask how am I navigating efficiently Emacs windows and
buffers. I have the feeling they expect me to share with them some
secrets that would turbo-charge common commands like <code>C-s</code>, <code>M-f</code>,
<code>C-x o</code>, etc.  I don&#8217;t, however, use those commands that much. Ever
since I saw that vim&#8217;s
<a href="https://github.com/easymotion/vim-easymotion">EasyMotion</a> has been
ported to Emacs, I&#8217;ve been using that port - namely
<a href="https://github.com/winterTTr/ace-jump-mode">ace-jump-mode</a>.</p>

<p>Basically, it allows you to navigate to every visible portion of your
Emacs (buffers &amp; windows) with only a handful of keystrokes (usually
one two activate it and one or two to get where you want to go). You
can see it in action in this
<a href="http://emacsrocks.com/e10.html">excellent video</a>. <code>ace-jump</code> served
me well for years, but I&#8217;ve had a few gripes with it that were never
addressed (multi-char targets, CamelCase support, etc). I would have
implemented those myself, if the project was maintained at all, but
alas - that&#8217;s not the case. Seems I wasn&#8217;t the only one who was
frustrated with <code>ace-jump</code>, as the prolific
<a href="http://oremacs.com/">Oleh Krehel</a> reimplemented it pretty much from
scratch for the purposes of his excellent
<a href="https://github.com/abo-abo/ace-window">ace-window</a> library. Once I
got wind of this, I managed to persuade Oleh to start distributing his
rewrite as a standalone project, which he dubbed
<a href="https://github.com/abo-abo/avy">avy</a>.</p>

<p><code>Avy</code> features everything <code>ace-jump</code> does and more. Apart from the
many extra features, its codebase is way cleaner and readable and Oleh
is a fantastic and very responsive maintainer. So, as far as I&#8217;m
concerned <code>ace-jump</code> is now a dead project and pretty much everyone
who&#8217;s using it should try out <code>avy</code> instead. Their usage and interface
are pretty similar, so the learning curve is non-existing. By the way,
here&#8217;s <code>avy</code> in action:</p>

<p><img src="https://raw.githubusercontent.com/wiki/nloyola/avy/images/avy-goto-char.png"></p>

<p>And what about my usage of <code>avy</code>? Nothing fancy here - I just bind the
commands I consider most important to handy keystrokes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c j&quot;</span><span class="p">)</span> <span class="ss">&#39;avy-goto-word-or-subword-1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;s-.&quot;</span><span class="p">)</span> <span class="ss">&#39;avy-goto-word-or-subword-1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;s-w&quot;</span><span class="p">)</span> <span class="ss">&#39;ace-window</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>avy-goto-word-or-subword-1</code> is aware of CamelCase words and I do a
lot of programming in languages that use those extensively.</p>

<p><code>avy</code> has one more thing going for it - it&#8217;s part of the default Emacs
package repo <a href="https://elpa.gnu.org/packages/">GNU ELPA</a>, which means
that you can install it right away without having to setup any
third-party repositories (which you&#8217;ll probably need sooner or later).</p>

<p><code>avy</code> and <code>ace-window</code> are naturally part of
<a href="https://github.com/bbatsov/prelude">Prelude</a>.</p>

<p>P.S. Oleh, one of those days you should rename <code>ace-window</code> to <code>avy-window</code>. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDEE Reborn]]></title>
    <link href="http://emacsredux.com/blog/2015/07/19/jdee-reborn/"/>
    <updated>2015-07-19T11:37:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/07/19/jdee-reborn</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jdee-emacs/jdee">JDEE</a> (Java Development
Environment for Emacs) used to be best way to develop Java apps in
Emacs a while back. It offered a ton of
<a href="http://emacswiki.org/emacs/JavaDevelopmentEnvironment">cool features</a>,
like smart auto-completion and a debugger. Unfortunately at some point
the development slowed down significantly and the project went in a
catatonic state. There was pretty much no activity for years in the
official SourceForge repo and there was also no support for features
introduced in Java 5+.</p>

<p>Recently, however, the project migrated to
<a href="https://github.com/jdee-emacs/jdee">GitHub</a> and it&#8217;s now way easier
to get involved. Seems that some people have already started work on
updating JDEE to support modern JDKs and modern Emacs functionality.</p>

<p>That&#8217;s a really exciting project, as Java support has traditionally
been a weakness of Emacs and I&#8217;m writing this post with the hope that
more people will help make JDEE great again.</p>

<p>So what are you waiting for? If you&#8217;re into Java and friends (Scala,
Clojure, Groovy, etc), check out the new official repo and let&#8217;s get
this party started!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Emacs (the first Emacs book in over a decade) is out]]></title>
    <link href="http://emacsredux.com/blog/2015/05/23/mastering-emacs-the-first-emacs-book-in-over-a-decade-is-out/"/>
    <updated>2015-05-23T15:19:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/23/mastering-emacs-the-first-emacs-book-in-over-a-decade-is-out</id>
    <content type="html"><![CDATA[<p><a href="https://www.masteringemacs.org/about">Mickey Petersen</a> just released
<a href="https://www.masteringemacs.org/book">Mastering Emacs</a>, the first new
book about our beloved editor, since
<a href="http://shop.oreilly.com/product/9780596006488.do">Learning GNU Emacs</a>(released
way back in 2004).</p>

<p><img src="http://emacsredux.com/images/articles/mastering_emacs_cover.png"></p>

<p>I haven&#8217;t had the time to read the book yet, but being familiar with
Mickey&#8217;s work I have no doubt it&#8217;s outstanding.  That&#8217;s all from me
for now - go buy the book and start mastering Emacs.</p>

<p><strong>P.S.</strong></p>

<p>I hope we won&#8217;t have to wait another decade for the next great Emacs book.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Emacs Lisp]]></title>
    <link href="http://emacsredux.com/blog/2015/05/16/learning-emacs-lisp/"/>
    <updated>2015-05-16T14:37:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/16/learning-emacs-lisp</id>
    <content type="html"><![CDATA[<p>People who have been using Emacs for a while often develop the desire
to learn Emacs Lisp, so they can customize Emacs more extensively,
develop extra packages and create the ultimate editing experience,
uniquely tailored to their needs &amp; preferences.</p>

<p>There are a ton of Emacs Lisp resources our there, but most people
generally need only one - the official
<a href="https://www.gnu.org/software/emacs/manual/elisp.html">Emacs Lisp manual</a>. It&#8217;s
bundled with Emacs and you can start reading right away by pressing
<code>C-h i m Elisp RET</code>. If you&#8217;re relatively new to programming in
general you might also check out the
<a href="https://www.gnu.org/software/emacs/manual/eintr.html">Introduction to Emacs Lisp</a>
(<code>C-h i m Emacs Lisp Intro RET</code>), before diving into the manual.</p>

<p>There are also plenty of Emacs Lisp tutorials online, but I&#8217;d advise
against using them, as most of them have never been updated after
originally published and Emacs Lisp keeps evolving all the time
(albeit not as fast as I would have liked it to). That being said,
<a href="http://bzg.fr/learn-emacs-lisp-in-15-minutes.html">Learn Emacs Lisp in 15 minutes</a>
is a short and sweet intro to the language. You can find more online
educational resources on the
<a href="http://www.emacswiki.org/emacs/EmacsLisp">EmacsWiki</a>.</p>

<p>Trust me on this - any time invested in learning Emacs Lisp will be
time well spent!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pragmatic Emacs]]></title>
    <link href="http://emacsredux.com/blog/2015/05/16/pragmatic-emacs/"/>
    <updated>2015-05-16T14:29:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/16/pragmatic-emacs</id>
    <content type="html"><![CDATA[<p>I recently noticed a new blog targeting beginner and intermediate
Emacs users - <a href="http://pragmaticemacs.com/">Pragmatic Emacs</a> by
<a href="http://www.bristol.ac.uk/physics/people/ben-j-maughan/overview.html">Ben Maughan</a>.</p>

<p>If you&#8217;re relatively new to Emacs you should definitely check it
out. Knowing how vast the Emacs ecosystem is, I&#8217;m pretty sure that
more experienced Emacs users will also learn a thing or two there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building MELPA packages locally]]></title>
    <link href="http://emacsredux.com/blog/2015/05/10/building-melpa-packages-locally/"/>
    <updated>2015-05-10T11:00:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/10/building-melpa-packages-locally</id>
    <content type="html"><![CDATA[<p>Don&#8217;t want to wait for the MELPA packages to be automatically rebuilt?
Want to try out some package recipe before submitting it upstream? You can
totally do this!</p>

<p>Just clone the
<a href="https://github.com/milkypostman/melpa">MELPA github repo</a>, open a
recipe from it in Emacs and press <code>C-c C-c</code> (bound to the command
<code>package-build-current-recipe</code>). Once the package is built you&#8217;ll be
prompted to install it.</p>

<p>Pretty neat, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs on OS X]]></title>
    <link href="http://emacsredux.com/blog/2015/05/09/emacs-on-os-x/"/>
    <updated>2015-05-09T13:31:00+03:00</updated>
    <id>http://emacsredux.com/blog/2015/05/09/emacs-on-os-x</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>In this article I&#8217;ll share with you a few tips and tricks about
running Emacs under the Max OS X operating system. This article will
focus on the vanilla GNU Emacs, but if you want a more native OS X experience you
might have a look at the
<a href="https://github.com/railwaycat/homebrew-emacsmacport/releases">enhanced Emacs Mac port</a>.</p>

<h2>Installation</h2>

<p>While Emacs is available for installation from
<a href="http://wikemacs.org/wiki/Installing_Emacs_on_OS_X">various sources</a>
I recommend you to use the
<a href="http://emacsformacosx.com/">Emacs for Mac OS X binary distribution</a>.</p>

<p>I always run the latest development version and I use homebrew to install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install emacs --HEAD --with-cocoa
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind there&#8217;s an ancient Emacs 22 that ships with OS X.  You
might want to alter your <code>PATH</code>, so that the new Emacs is picked up in
a shell.</p>

<p>Alternatively you can just create an alias in your shell and when you
invoke <code>emacs</code> it will run the newly installed version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs -nw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you installed via Homebrew that path might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/usr/local/Cellar/emacs/24.5/Emacs.app/Contents/MacOS/Emacs -nw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make it permanent, if using bash, add that line to
<code>~/.bash_profile</code>. zsh users will want to update <code>~/.zshrc</code> instead.</p>

<p>In case you&#8217;re wondering - <code>nw</code> tells Emacs to start in &#8220;terminal&#8221;
mode (instead of in GUI mode).</p>

<h2>Keybindings</h2>

<p>I heartily recommend you to remap your <em>Caps Lock</em> key to <em>Control</em>. This
can be easily done via <em>Preferences -> Keyboard -> Modifier Keys</em>. If
you&#8217;re using a laptop keyboard or the bluetooth keyboard you
might want to remap your right <code>Option</code> key to <code>Control</code> as
well. No one can use effectively Emacs without a right Control
key. Remapping it is a bit more involved and requires the use of the
third-party utility
<a href="http://pqrs.org/macosx/karabiner/">Karabiner</a>.</p>

<p>If you&#8217;re adventurous you might even try <a href="http://emacsredux.com/blog/2013/11/12/a-crazy-productivity-boost-remap-return-to-control/">a crazier idea</a>.</p>

<h2>Setting the PATH variable</h2>

<p>Long story short - if you&#8217;re running Emacs from Spotlight (or any
other launcher for that matter) your <code>PATH</code> and <code>exec-path</code> variables
won&#8217;t be same as the ones in your shell (and that&#8217;s every nasty since
you want be able to run some external programs from Emacs). The best
way to handle this would be installing the package
<a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a>
by Steve Purcell.</p>

<h2>Flyspell</h2>

<p>For flyspell to work correctly you&#8217;ll need to install aspell plus a few dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install aspell --lang<span class="o">=</span>en
</span></code></pre></td></tr></table></div></figure>


<h2>Proced</h2>

<p>The mighty
<a href="http://emacsredux.com/blog/2013/05/02/manage-processes-with-proced/">proced</a>
doesn&#8217;t work on OS X.  You can use
<a href="http://www.splode.com/~friedman/software/emacs-lisp/src/vkill.el">vkill</a>
as a replacement. It&#8217;s kind of basic, but it mostly works.</p>

<h2>Dired</h2>

<p>OS X ships with BSD&#8217;s <code>ls</code> command which doesn&#8217;t have all the features
of GNU <code>ls</code> (used internally by <code>dired</code>). Fortunately, this is easily solvable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install coreutils
</span></code></pre></td></tr></table></div></figure>


<p>To avoid conflicts the GNU utils are prefixed with <code>g</code>, so <code>ls</code> becomes <code>gls</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">insert-directory-program</span> <span class="p">(</span><span class="nv">executable-find</span> <span class="s">&quot;gls&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dash</h2>

<p><a href="https://kapeli.com/dash">Dash</a> is the ultimately API documentation
browser. I can&#8217;t live without it!</p>

<p>If you&#8217;re using it as well, you might want to install
<a href="https://github.com/stanaka/dash-at-point">dash-at-point</a>.</p>

<h2>More goodies</h2>

<p>If you want to spare yourself part of the headache of configuring
Emacs on OSX and get a lot of extra firepower you might want to install
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> - an enhanced
Emacs 24.x configuration (developed by yours truly) that should make
your experience with Emacs both more pleasant and more powerful.</p>

<p><strong>P.S.</strong> I&#8217;d like to hear your tips &amp; suggestions about making the
Emacs experience on OS X nicer and more powerful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clear Comint Buffers]]></title>
    <link href="http://emacsredux.com/blog/2015/01/18/clear-comint-buffers/"/>
    <updated>2015-01-18T21:57:00+02:00</updated>
    <id>http://emacsredux.com/blog/2015/01/18/clear-comint-buffers</id>
    <content type="html"><![CDATA[<p><code>comint</code> provides Emacs infrastructure for building command
interpreters. It&#8217;s backing a lot of popular shell/REPL modes - like <code>eshell</code>,
<code>inferior-lisp</code>, <code>inf-ruby</code>, <code>inf-clojure</code>, etc.</p>

<p><code>comint</code> provides a myriad of built-in commands, but somewhat surprisingly
it doesn&#8217;t feature a command to clear the contents of a <code>comint</code> buffer.
Let&#8217;s write one such command ourselves!</p>

<p>While there are several way to tackle it, I feel this is the simplest
(and the one that makes the best use of <code>comint</code>&#8217;s existing
functionality):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">comint-clear-buffer</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">comint-buffer-maximum-size</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">comint-truncate-buffer</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; let&#39;s bind the new command to a keycombo</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">comint-mode-map</span> <span class="s">&quot;\C-c\M-o&quot;</span> <span class="nf">#&#39;</span><span class="nv">comint-clear-buffer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Simple and elegant, right? One day it might even end up being part of <code>comint</code> itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing the Fringes]]></title>
    <link href="http://emacsredux.com/blog/2015/01/18/customizing-the-fringes/"/>
    <updated>2015-01-18T09:41:00+02:00</updated>
    <id>http://emacsredux.com/blog/2015/01/18/customizing-the-fringes</id>
    <content type="html"><![CDATA[<p>On graphical displays, each Emacs window normally has narrow <strong>fringes</strong> (gutters/margins)
on the left and right edges. The fringes are used to display symbols
that provide information about the text in the window. You can type
<code>M-x fringe-mode</code> to disable the fringes, or modify their width. This
command affects fringes in all frames; to modify fringes on the
selected frame only, use <code>M-x set-fringe-style</code>. You can make your
changes to the fringes permanent by customizing the variable
<code>fringe-mode</code>.</p>

<p>Out-of-the-box the most common use of the fringes is to indicate a continuation
line. When one line of text is split into multiple screen lines, the
left fringe shows a curving arrow for each screen line except the
first, indicating that “this is not the real beginning”. The right
fringe shows a curving arrow for each screen line except the last,
indicating that “this is not the real end”. If the line&#8217;s direction is
right-to-left, the meanings of the curving
arrows in the fringes are swapped.</p>

<p>Third-party modes like
<a href="https://github.com/flycheck/flycheck">flycheck</a> and
<a href="https://github.com/dgutov/diff-hl">diff-hl</a> also make use of the fringe to
display valuable information there (e.g. lint and VC information).</p>

<p>By default both fringes have width 8 pixels, but we can easily adjust this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; make both fringes 4 pixels wide</span>
</span><span class='line'><span class="p">(</span><span class="nv">fringe-mode</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; make the left fringe 4 pixels wide and the right disappear</span>
</span><span class='line'><span class="p">(</span><span class="nv">fringe-mode</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span> <span class="o">.</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; restore the default sizes</span>
</span><span class='line'><span class="p">(</span><span class="nv">fringe-mode</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned before, you can also invoke this command interactively and
determine the optimal fringe size for you, before making it permanent in
your config. The options presented by the <code>fring-mode</code> command are defined
in the <code>fringe-styles</code> list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">defconst</span> <span class="nv">fringe-styles</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;default&quot;</span> <span class="o">.</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;no-fringes&quot;</span> <span class="o">.</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;right-only&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="mi">0</span> <span class="o">.</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;left-only&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="no">nil</span> <span class="o">.</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;half-width&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="mi">4</span> <span class="o">.</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&quot;minimal&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>  <span class="s">&quot;Alist mapping fringe mode names to fringe widths.</span>
</span><span class='line'><span class="s">Each list element has the form (NAME . WIDTH), where NAME is a</span>
</span><span class='line'><span class="s">mnemonic fringe mode name and WIDTH is one of the following:</span>
</span><span class='line'><span class="s">- nil, which means the default width (8 pixels).</span>
</span><span class='line'><span class="s">- a cons cell (LEFT . RIGHT), where LEFT and RIGHT are</span>
</span><span class='line'><span class="s">  respectively the left and right fringe widths in pixels, or</span>
</span><span class='line'><span class="s">  nil (meaning the default width).</span>
</span><span class='line'><span class="s">- a single integer, which specifies the pixel widths of both</span>
</span><span class='line'><span class="s">fringes.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be careful when playing with the fringe size. Certain info doesn&#8217;t
look very good when the fringe is too small (e.g. less than 4 pixels).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lossage]]></title>
    <link href="http://emacsredux.com/blog/2014/12/23/lossage/"/>
    <updated>2014-12-23T17:35:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/12/23/lossage</id>
    <content type="html"><![CDATA[<p>Are you sure you&#8217;re using Emacs in an efficient way? Perhaps you&#8217;re
overusing commands like <code>C-f</code> and <code>C-b</code> to navigate around when you
can be using more efficient alternatives like <code>M-f</code> and <code>M-b</code> (or a
third-party package like
<a href="http://emacsrocks.com/e10.html">ace-jump-mode</a>).  Gaining such
insight is somewhat hard, as we generally don&#8217;t pay attention to our
sub-optimal usage patterns. If we could only see what were the last
few hundred keystrokes we entered in our current Emacs
session&#8230; Turns out we can do this with the aptly-named command
<code>view-lossage</code> (<code>C-h l</code>) (<code>lossage</code> means <code>malfunction</code>). It displays
the last 300 keystrokes and its output looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>n e r a l l y SPC d o n ' t SPC n o t i c e SPC o u
</span><span class='line'>r SPC s u b o p t i m a l SPC s u a g &lt;backspace&gt; &lt;backspace&gt;
</span><span class='line'>&lt;backspace&gt; &lt;backspace&gt; u s a g e SPC p a t e &lt;backspace&gt;
</span><span class='line'>t e r n s . SPC I f SPC w e SPC c o u l d SPC o n l
</span><span class='line'>y &lt;return&gt; s e e SPC w h a t SPC w e r e SPC t h e
</span><span class='line'>SPC l a s t SPC f &lt;backspace&gt; h e w SPC &lt;backspace&gt;
</span><span class='line'>&lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; f e w SPC h u n
</span><span class='line'>d r e d SPC k e y s t r o k e s SPC w e SPC i &lt;backspace&gt;
</span><span class='line'>e n t e r e d SPC i n SPC o u r SPC c u r r e n t SPC
</span><span class='line'>E m a c s SPC s e s s i o n . . . SPC T u r n s SPC
</span><span class='line'>o u t SPC &lt;backspace&gt; SPC w e SPC c a n SPC d o SPC
</span><span class='line'>t h i s &lt;company-dummy-event&gt; . &lt;backspace&gt; SPC w i
</span><span class='line'>t h SPC t h e SPC m a c &lt;backspace&gt; g i c a l &lt;backspace&gt;
</span><span class='line'>&lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt;
</span><span class='line'>&lt;backspace&gt; &lt;backspace&gt; SPC c o m m a n d &lt;return&gt;
</span><span class='line'>` v i e w - l o s s a g e ` SPC ( b o u n &lt;backspace&gt;
</span><span class='line'>&lt;backspace&gt; &lt;backspace&gt; &lt;backspace&gt; ` C - h SPC l `
</span><span class='line'>) . C-p C-p M-q C-n C-n C-n C-e C-x b l o s s &lt;return&gt;
</span><span class='line'>C-x b l o s C-g C-h l</span></code></pre></td></tr></table></div></figure>


<p>Inspecting it can be super enlightening! I do this all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uptime]]></title>
    <link href="http://emacsredux.com/blog/2014/12/23/uptime/"/>
    <updated>2014-12-23T17:28:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/12/23/uptime</id>
    <content type="html"><![CDATA[<p>Many Emacs users keep a single Emacs instance running for quite a while.
I&#8217;ve had instances running for over a month. How do I know this? Unsurprisingly,
there&#8217;s a built-in command for that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x emacs-uptime</span></code></pre></td></tr></table></div></figure>


<p>Now it&#8217;s time to start bragging to your vim-using friends!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting between symbols and strings]]></title>
    <link href="http://emacsredux.com/blog/2014/12/05/converting-between-symbols-and-strings/"/>
    <updated>2014-12-05T17:28:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/12/05/converting-between-symbols-and-strings</id>
    <content type="html"><![CDATA[<p>Sometimes you might need to convert a symbol to string (or vice versa) in Emacs Lisp. You start
looking for functions like <code>symbol-to-string</code> and <code>string-to-symbol</code> but, alas, they do not seem exist.
Do not despair! Such functions do actually exist, although their names are likely to surprise you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">symbol-name</span> <span class="ss">&#39;some-symbol</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; &quot;some-symbol&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nb">intern</span> <span class="s">&quot;some-symbol&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">; =&gt; some-symbol</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Open an Info Manual]]></title>
    <link href="http://emacsredux.com/blog/2014/11/13/quickly-open-an-info-manual/"/>
    <updated>2014-11-13T15:25:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/11/13/quickly-open-an-info-manual</id>
    <content type="html"><![CDATA[<p>Every Emacs user knows that Emacs ships with plenty of built-in
documentation in the <code>GNU info</code> format (they don&#8217;t call it a
self-documenting editor for no reason). Most Emacs users know how to
access that built-in documentation with <code>C-h i</code> (<code>M-x info</code>) and some
Emacs users even know that the Emacs manual can be opened directly
with <code>C-h r</code> (<code>M-x info-emacs-manual</code>).</p>

<p>If you know the name of the manual you&#8217;re looking for, however,
there&#8217;s a nice little-known alternative to using <code>C-h i</code> - the
<code>info-display-manual</code> command. When you run it you&#8217;ll be prompted in
the minibuffer for the name of the manual you&#8217;d like to view (manual
name completion is available).</p>

<p>To give you a more concrete example of the command&#8217;s advantage over
<code>info</code> let&#8217;s try to open the Emacs Lisp manual with both
commands. With <code>info</code> you&#8217;ll have to type the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x info RET m elisp RET</span></code></pre></td></tr></table></div></figure>


<p>And the alternative would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x info-emacs-manual RET elisp RET</span></code></pre></td></tr></table></div></figure>


<p>If you like the command I&#8217;d suggest binding it to some keybinding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="ss">&#39;help-command</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-i&quot;</span><span class="p">)</span> <span class="ss">&#39;info-display-manual</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs's Development has Migrated to Git]]></title>
    <link href="http://emacsredux.com/blog/2014/11/13/emacss-development-has-migrated-to-git/"/>
    <updated>2014-11-13T15:19:00+02:00</updated>
    <id>http://emacsredux.com/blog/2014/11/13/emacss-development-has-migrated-to-git</id>
    <content type="html"><![CDATA[<p>The long wait is over - Emacs&#8217;s development
<a href="https://lists.gnu.org/archive/html/emacs-devel/2014-11/msg00681.html">has finally migrated from bazaar to git</a>.</p>

<p>Now you don&#8217;t have any excuses not to contribute to Emacs!</p>

<p>If you&#8217;re wondering where to start I&#8217;d suggest taking a look at <a href="http://lars.ingebrigtsen.no/2014/11/13/welcome-new-emacs-developers/">this short article</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 24.4]]></title>
    <link href="http://emacsredux.com/blog/2014/10/21/emacs-24-dot-4/"/>
    <updated>2014-10-21T17:36:00+03:00</updated>
    <id>http://emacsredux.com/blog/2014/10/21/emacs-24-dot-4</id>
    <content type="html"><![CDATA[<p>Emacs 24.4 <a href="http://lists.gnu.org/archive/html/emacs-devel/2014-10/msg00713.html">is finally out</a>!</p>

<p>You can read about all the new features
<a href="http://www.gnu.org/software/emacs/news/NEWS.24.4">here</a>.  I&#8217;ve
published
<a href="http://emacsredux.com/blog/2013/12/31/a-peek-at-emacs-24-dot-4/">a series of articles</a>
about some of the more interesting features.</p>

<p>In related news - the Emacs Mac Port based on 24.4
<a href="https://lists.gnu.org/archive/html/emacs-devel/2014-10/msg00725.html">has also been released</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lisp Style Guide]]></title>
    <link href="http://emacsredux.com/blog/2014/09/04/emacs-lisp-style-guide/"/>
    <updated>2014-09-04T15:00:00+03:00</updated>
    <id>http://emacsredux.com/blog/2014/09/04/emacs-lisp-style-guide</id>
    <content type="html"><![CDATA[<p>I&#8217;ve started working on a community
<a href="https://github.com/bbatsov/emacs-lisp-style-guide">Emacs Lisp style guide</a>.
My goal is to create a comprehensive document similar to the
<a href="https://github.com/bbatsov/clojure-style-guide">Clojure</a> and
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby</a> community style
guides.</p>

<p>Such a document would be a great starting point for many newcomers to
the Emacs community and should increase the overall quality of the
code produced by it.  There&#8217;s much to be documented about code layout,
preferred syntactic conventions, major and minor mode definitions,
etc. and I obviously can&#8217;t know the best practices about everything so
I&#8217;ll need a lot of help.</p>

<p>Of course, we already have the official
<a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Tips.html#Tips">coding guidelines</a>,
but they are a bit light on examples, rationale, etc. Hopefully the community style guide
will manage to fill any gaps in them and in good time portions of it will find their place
in the official documentation.</p>

<p>I&#8217;m inviting all members of our community interested in promoting good
Emacs Lisp practices to join the development of this document!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A peek at Emacs 24.4: superword-mode]]></title>
    <link href="http://emacsredux.com/blog/2014/08/27/a-peek-at-emacs-24-dot-4-superword-mode/"/>
    <updated>2014-08-27T18:24:00+03:00</updated>
    <id>http://emacsredux.com/blog/2014/08/27/a-peek-at-emacs-24-dot-4-superword-mode</id>
    <content type="html"><![CDATA[<p>In a previous post I wrote about
<a href="http://emacsredux.com/blog/2013/04/21/camelcase-aware-editing/">camel-case aware editing with subword-mode</a>. Emacs
24.4 adds a complementary minor mode called <code>superword-mode</code>, which
also alters the behavior of word-based commands when enabled.</p>

<p>Normally Emacs would consider underscores and dashes word separators
(<code>snake_case</code> and <code>lisp-case</code> anyone?). This affects all <code>word</code>
commands - <code>forward-word</code>, <code>backward-word</code>, <code>kill-word</code>, etc. Let&#8217;s
see a couple of examples (<code>|</code> denotes the cursor position):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; word with dash
</span><span class='line'>|some-word
</span><span class='line'>
</span><span class='line'>;; press M-f (forward-word) once
</span><span class='line'>some|-word
</span><span class='line'>
</span><span class='line'>;; press M-f again
</span><span class='line'>some-word|
</span><span class='line'>
</span><span class='line'>;; press M-b (backward-word) once
</span><span class='line'>some-|word
</span><span class='line'>
</span><span class='line'>;; word with underscore
</span><span class='line'>|some_word
</span><span class='line'>
</span><span class='line'>;; press M-f once
</span><span class='line'>some|_word
</span><span class='line'>
</span><span class='line'>;; press M-f again
</span><span class='line'>some_word|
</span><span class='line'>
</span><span class='line'>;; press M-b once
</span><span class='line'>some_|word
</span><span class='line'>
</span><span class='line'>;; word in camelCase (assuming subword-mode is not enabled)
</span><span class='line'>|someWord
</span><span class='line'>
</span><span class='line'>;; press M-f once
</span><span class='line'>someWord|
</span><span class='line'>
</span><span class='line'>;; word in camelCase (assuming subword-mode is enabled)
</span><span class='line'>|someWord
</span><span class='line'>
</span><span class='line'>;; press M-f once
</span><span class='line'>some|Word</span></code></pre></td></tr></table></div></figure>


<p>Personally I find the default behavior combined with <code>subword-mode</code>
great. I do a lot of Ruby and Lisp programming and it also makes a lot
of sense to me to be able to navigate the portions of a complex word,
but I guess not everyone feels this way. Enter <code>superword-mode</code> - when
it&#8217;s enabled all &#8220;complex/compound&#8221; words are treated as a single word:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; word with dash
</span><span class='line'>|some-word
</span><span class='line'>
</span><span class='line'>;; press M-f once
</span><span class='line'>some-word|
</span><span class='line'>
</span><span class='line'>;; word with underscore
</span><span class='line'>|some_word
</span><span class='line'>
</span><span class='line'>;; press M-f once
</span><span class='line'>some_word|
</span><span class='line'>
</span><span class='line'>;; word in camelCase
</span><span class='line'>|someWord
</span><span class='line'>
</span><span class='line'>;; press M-f once
</span><span class='line'>someWord|</span></code></pre></td></tr></table></div></figure>


<p>Note that you cannot have <code>subword-mode</code> and <code>superword-mode</code> enabled
at the same time. Turning one of them on will disable the other.</p>

<p>Personally, I don&#8217;t see much value in <code>superword-mode</code> as a mode
that&#8217;s enabled all the time, but I can imagine some useful
scenarios in which I&#8217;d enable it briefly to do some focused editing.</p>
]]></content>
  </entry>
  
</feed>
